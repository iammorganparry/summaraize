// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Author",
    columns: [
      {
        name: "avatar",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "channel_url",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "created_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "updated_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "video_id",
        type: "link",
        link: { table: "Video" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Summary",
    columns: [
      {
        name: "created_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "embedding",
        type: "vector",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "summary",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "summary_html_formatted",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "transcription",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "updated_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "User" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "video_id",
        type: "link",
        link: { table: "Video" },
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "video_url",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "SummaryRequest",
    columns: [
      {
        name: "created_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "stage",
        type: 'bb_tr1ch2be194sj61u6fqeuspn34_pebqlc."SummaryStage"',
        notNull: true,
        unique: false,
        defaultValue:
          "'DOWNLOADING'::bb_tr1ch2be194sj61u6fqeuspn34_pebqlc.\"SummaryStage\"",
      },
      {
        name: "updated_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "User" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "video_url",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "User",
    columns: [
      {
        name: "created_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "updated_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Video",
    columns: [
      {
        name: "created_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "data_raw",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "duration",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "likes",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "thumbnail",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "updated_at",
        type: "timestamp(3) without time zone",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "url",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "User" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "views",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "_prisma_migrations",
    columns: [
      {
        name: "applied_steps_count",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
      {
        name: "checksum",
        type: "varchar(64)",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "finished_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "varchar(36)",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "logs",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "migration_name",
        type: "varchar(255)",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "rolled_back_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "started_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Author = InferredTypes["Author"];
export type AuthorRecord = Author & XataRecord;

export type Summary = InferredTypes["Summary"];
export type SummaryRecord = Summary & XataRecord;

export type SummaryRequest = InferredTypes["SummaryRequest"];
export type SummaryRequestRecord = SummaryRequest & XataRecord;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type Video = InferredTypes["Video"];
export type VideoRecord = Video & XataRecord;

export type PrismaMigrations = InferredTypes["_prisma_migrations"];
export type PrismaMigrationsRecord = PrismaMigrations & XataRecord;

export type DatabaseSchema = {
  Author: AuthorRecord;
  Summary: SummaryRecord;
  SummaryRequest: SummaryRequestRecord;
  User: UserRecord;
  Video: VideoRecord;
  _prisma_migrations: PrismaMigrationsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Morgan-Parry-s-workspace-pebqlc.eu-west-1.xata.sh/db/summaraize",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
